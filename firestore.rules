rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidGenerationJob() {
      let job = request.resource.data;
      return 
        job.adtitle is string &&
        job.components.musicUrl is string &&
        job.components.voUrl is string &&
        job.createdAt is timestamp &&
        job.id is string &&
        job.status is string &&
        job.type is string &&
        job.userId == request.auth.uid;
    }
    
    function isValidSubscription() {
      let sub = request.resource.data.subscription;
      return 
        sub.isSubscribed is bool &&
        sub.credits is number &&
        sub.subscriptionType is string &&
        sub.subscriptionType in ['none', 'standard', 'professional'];
    }

    match /newsletter/{documentId} {
      allow read: if false;
      allow create: if 
        request.resource.data.keys().hasOnly(['email', 'timestamp']) &&
        request.resource.data.email is string &&
        request.resource.data.email.matches('^[^@]+@[^@]+\\.[^@]+$') && 
        request.resource.data.timestamp is timestamp;
    }

    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      
      allow create: if isAuthenticated() 
        && isOwner(userId)
        && request.resource.data.uid == userId
        && request.resource.data.email is string
        && request.resource.data.displayName is string
        && request.resource.data.registeredAt is timestamp;
      
      allow update: if isAuthenticated() 
        && isOwner(userId)
        && (!request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['uid', 'email', 'registeredAt']))
        && (
          !request.resource.data.keys().hasAll(['subscription']) 
          || isValidSubscription()
        );
      
      match /generationJobs/{jobId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated() 
          && isOwner(userId)
          && isValidGenerationJob();
        allow update: if isAuthenticated() 
          && isOwner(userId)
          && isValidGenerationJob();
        allow delete: if isAuthenticated() && isOwner(userId);
      }
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}